# rule fastp: trim reads
# rule assembly
# rule check assembly quality
# rule remove poor assembled genomes
# rule kraken
# rule annotate

from snakemake.utils import validate
import pandas as pd
import os

# ----- load config file ----- #

configfile: "config/config.yaml"

# ----- define functions ----- #
def _read_file_names(indir, extension='_1.fastq.gz'):
  return {x.split(extension)[0] for x in os.listdir(indir) if x.endswith(extension)}

# ----- params ----- #
samples = list(_read_file_names("data/reads/", extension='_1.fastq.gz'))
print(samples)

# ----- start execution of the rules ----- #

rule fastp:
    input:
        expand("out/fastp/reads/{sample}_1.fastq.gz", sample=samples),
        expand("out/fastp/reads/{sample}_2.fastq.gz", sample=samples),
        expand("out/fastp/reports/{sample}.json", sample=samples),
        expand("out/fastp/reports/{sample}.html", sample=samples)

rule run_fastp:
    input:
        R1=lambda wildcards: "data/reads/{sample}_1.fastq.gz",
        R2=lambda wildcards: "data/reads/{sample}_2.fastq.gz"
    output:
        r1="out/fastp/reads/{sample}_1.fastq.gz",
        r2="out/fastp/reads/{sample}_2.fastq.gz",
        json="out/fastp/reports/{sample}.json",
        html="out/fastp/reports/{sample}.html"
    threads: 2
    conda: "envs/fastp.yaml"
    shell:
        """
        fastp -i {input.R1} -I {input.R2} -o {output.r1} -O {output.r2} -j {output.json} -h {output.html}
        """

rule assembly:
    input:
        expand("out/shovill/{sample}", sample=samples)

rule run_assembly:
    input:
        r1=lambda wildcards: "out/fastp/reads/{sample}_1.fastq.gz",
        r2=lambda wildcards: "out/fastp/reads/{sample}_2.fastq.gz"
    output:
        fasta=directory("out/shovill/{sample}")
    threads: 8
    conda: "envs/shovill.yaml"
    shell:
        """
        shovill --outdir {output} --R1 {input.r1} --R2 {input.r2} --tmpdir "/tmp/"
        """

rule fast_assembly:
    input:
        expand("out/skesa/{sample}.fasta", sample=samples)

rule run_fast_assembly:
    input:
        r1=lambda wildcards: "out/fastp/reads/{sample}_1.fastq.gz",
        r2=lambda wildcards: "out/fastp/reads/{sample}_2.fastq.gz" 
    output:
        fasta="out/skesa/{sample}.fasta"
    threads: 12
    conda: "envs/skesa.yaml"
    shell:
        """
        skesa --cores 12 --reads {input.r1} {input.r2} --contigs_out {output}
        """

# check quast directory miniconda
rule quast:
    input: "out/skesa/{sample}.fasta"
    output: "out/quast/{sample}"
    params: 
        contiglen=200
    threads: 8
    logs: "out/logs/quast.log"
    conda: "envs/quast.yaml"
    shell:
        """
        python /fast-storage/miniconda3/quast/bin/quast -o {output} -t 8 /
        --no-plots --no-html --no-icarus --min-contig {params.contiglen} {input}
        """


